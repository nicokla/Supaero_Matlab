function...
[...
	...%textureDescriptor,...
	...%whereTextureDescriptorIsDefined, ...
	...%sparseMatrixDistance, ...
	...%indexToX,...
	...%indexToY,...
	...%xyToIndex,...
	...%sparseCorrelationMatrix, ...
	...%normalizedSparseCorrelationMatrix, ...
	...%leftEigenVectors_images,...
    ...%rightEigenVectors_images, ...
    eigenvalues,...
	diffusionMapsCoordinates_images...
]=...
imageDiffusionMaps...
( ...
    image3d,...
    good,...
	paramsToGetDescriptor,...
    functionToGetDescriptor,...
    functionToGetDistances,...
	kForKnn,...
    ...%functionToGetTheCorrelationMatrix,...
    ...%functionToNormalizeTheCorrelationMatrix, ...
	paramsToNormalizeTheCorrelationMatrix,...
    numberOfEigenvectorsToKeep, ...
    t...
)

% convertListToImage
% getSparseMatrixDistance
% functionToDoTheEigenDecomposition

% functionToGetTheCorrelationMatrix
% functionToNormalizeTheCorrelationMatrix

% functionToGetDescriptor,...
	% LbpRotInv
	% LbpRotInvAndVar
	% LbpUniform
	% Wexler
	% Windowing --> whereTextureDescriptorIsDefined + gros
% functionToGetDistances,...
	% For windowing :
		% functionToGetDistances_Euclidian_patch
	% For Wexler :
		% euclidian
	% For the LBPs :
		% euclidian
		% Shannon
		% Hellinger
% paramsToNormalizeTheCorrelationMatrix
	% alpha (0 = no effect, typically 1/2 or 1 for an effect)
	% markovOrSym (1=markov, 0=sym)

[Mx,My,Mz]=size(image3d);

%%
fprintf('1) Computing descriptor\n');
[textureDescriptor,...
whereTextureDescriptorIsDefined]=...
	functionToGetDescriptor(...
image3d,...
good,...
paramsToGetDescriptor);

% sc(textureDescriptor(:,:,22))
% imagesc2(textureDescriptor(:,:,5),7)
% size(textureDescriptor)
% sc(textureDescriptor(:,:,1))
% sc(whereTextureDescriptorIsDefined)
% imagesc(sum(textureDescriptor,3))


%%
fprintf('2) Computing the distance matrix\n');

% Patch match time complexity as we coded it (approx) :
% 2 minutes * (nbOfPixelsOfTheSizeOfTheImage/200)^2
% Ex : image 1000*1000 : 2*(5^2)=50 minutes.
[x,...
y,...
d]=...
	functionToGetDistances(...
textureDescriptor,...
whereTextureDescriptorIsDefined,...
kForKnn);

for i=1:kForKnn
    x(:,:,i)=x(:,:,i).*int32(whereTextureDescriptorIsDefined);
    y(:,:,i)=y(:,:,i).*int32(whereTextureDescriptorIsDefined);
    d(:,:,i)=d(:,:,i).*whereTextureDescriptorIsDefined;
end

% imagesc(x(:,:,20))
% imagesc(y(:,:,1))
% imagesc(d(:,:,1))
% imagesc(mean(d,3))
% sum(sum(sum(isnan(d))))
% imagesc(sum(isnan(d),3));
% d(isnan(d))=0;
% mean(mean(mean(d)))
% mean(mean(mean(isnan(d))))
% imagesc(sum(isnan(d),3))

% Contre les 1e10 (suivi de sqrt donc 1e5) qu'on a mis
% dans generalizedPatchMatch_EuclidianSquared_patch.cpp
% pour eviter les patchs trop peu connus
% sum(sum(sum(d>=(1e5-1))))
% d(d>=(1e5-1))=0;

%%
[...%sparseMatrixDistance,...
indexToX,...
indexToY,...
xyToIndex,...
I,J,D,N,indexOfVoisins,numberOfVoisins,...
distanceOfVoisins] = ...
	getSparseMatrixDistance(...
x,...
y,...
d,...
whereTextureDescriptorIsDefined);

% min(numberOfVoisins)
% mean(numberOfVoisins)
% sum(isnan(D))


%%
fprintf('3) Computing the correlation matrix\n');
sparseCorrelationMatrix=...
	functionToGetTheCorrelationMatrix(...
I,J,D,N,indexOfVoisins,numberOfVoisins,...
distanceOfVoisins);

% sparseCorrelationMatrix(1,:)


%%
normalizedSparseCorrelationMatrix=...
	functionToNormalizeTheCorrelationMatrix(...
sparseCorrelationMatrix,...
paramsToNormalizeTheCorrelationMatrix);

% sum(sum(isnan(normalizedSparseCorrelationMatrix)))
% normalizedSparseCorrelationMatrix(1,:)


%%
fprintf('4) Diagonalization of the correlation matrix\n');
[... %leftEigenVectors,...
rightEigenVectors, ...
eigenvalues]=...
	functionToDoTheEigenDecomposition(...
normalizedSparseCorrelationMatrix, ...
numberOfEigenvectorsToKeep,...
paramsToNormalizeTheCorrelationMatrix.markovOrSym);

% leftEigenVectors_images=...
% 	convertListToImage(...
% leftEigenVectors,...
% indexToX,...
% indexToY,Mx,My);

rightEigenVectors_images=...
	convertListToImage(...
    rightEigenVectors,...
    indexToX,...
    indexToY,Mx,My);

% save rightEigenVectors_images_1.mat...
%     params...
%     rightEigenVectors_images ...
%     eigenvalues;

% for i=2:10
%     imagesc2(rightEigenVectors_images(:,:,i), 7, false);
%     pause;
% end


%%
diffusionMapsCoordinates_images=...
    zeros(Mx,My,numberOfEigenvectorsToKeep);
for i=1:numberOfEigenvectorsToKeep
	diffusionMapsCoordinates_images(:,:,i)=...
		real(eigenvalues(i))^t * ...
		rightEigenVectors_images(:,:,i);
end
		



